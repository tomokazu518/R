[["index.html", "ちょっとニッチなR入門 Chapter 1 はじめに", " ちょっとニッチなR入門 Tomokazu NOMURA 2021/01/17 Chapter 1 はじめに レポートや卒業論文で，Rを使ってデータ分析を行うための方法を説明する。Rについての解説ページは多数あるが，ここではとくに社会科学系分野におけるデータ分析を想定して説明する。体系的な内容というよりは，ほかの資料で説明されていることの隙間を埋めることを意図しているので，いろいろな資料と合わせて読んでほしい。 とくにおすすめのページは以下。 立命館大学の森先生による「卒業論文のためのR入門」 関西大学の宋先生と高知工科大学の矢内先生による「私たちのR：ベストプラクティスの探求」 北海道大学の土居先生による「Rで計量政治学入門」 今後，ビジネスにおいても，学術研究においても，統計データを用いた分析は最も重要なツールになっていくと考えられる。統計学の理論を理解しておくことも重要だが，実際にデータを収集して整理し分析することができなければ，せっかくの理論も役に立たない。理論と実践をバランス良く学ぶことが重要。 データ分析というと，まずはExcelというイメージがあるかもしれない。実際，「分析ツール」などの機能を用いれば，Excelでも一通りの統計分析ができる。しかし，Excelは基本的にデータを分析するためのソフトウェアではないので，大規模なデータを扱ったり，高度な分析を行ったりするには向いていない。なにより統計を分析するには使い勝手が良くないので，無料でさまざまな統計分析パッケージが利用できる現在，あえてExcelを利用するメリットはない（Excelには別の使い途がある）。 Rは統計データを分析のためのソフトウェア。完全に無料で利用でき，全世界に多数のユーザーがいるため，使い方についてさまざまな情報がインターネットで入手できるため，おカネをかけずに自力で習得するのであれば最もおすすめできる。また，最新の分析手法を用いるためのパッケージが絶えず開発されリリースされている。最初は少しとっつきにくいと感じるかもしれないが，慣れてくれば非常に柔軟な使い方ができる。 "],["rとrstudioのインストール.html", "Chapter 2 RとRStudioのインストール 2.1 Rが使えるパソコン 2.2 インストール方法 2.3 RStudioの画面 2.4 ヘルプの参照 2.5 チュートリアルの実行 2.6 パッケージのインストール", " Chapter 2 RとRStudioのインストール 2.1 Rが使えるパソコン Rはオープン・ソースで開発されており，Windows，Mac，Linuxのいずれでも利用可能。Rそのものは性能の低いマシンでも十分に動作する(ただし，分析するデータの規模や用いる分析手法によってはある程度高性能なパソコンが必要になるかもしれない)。また，RStudioはRを便利に使うために必須と言えるソフトウェア。 これからパソコンを用意するという人には，Mac &gt; Linux &gt; Windowsの順でおすすめする。初心者がRを使っていてトラブルが少ないのはMac。Linuxも安定しているが，そもそも一般の人には馴染みがないので，R以外の用途を考えると選択肢からは外れそう。Windowsは積極的におすすめしないが，いま使っているPCがWindowsであれば，買い換えるほどのものでもない。 Windowsの場合には，WSLという仮想環境のLinuxにRをインストールして使うことも可能。わたしは，WSLにRとRStudio Serverをインストールして，ChromeなどのブラウザでRStudioを使っている(快適な環境)。 2.2 インストール方法 インストールの方法については，高知工科大学の矢内先生のホームページに，これ以上丁寧に説明することはできないというくらいに丁寧な解説スライドが公開されている。Ubuntu，Mac，Windows版があるので，これらを参考にインストールしてほしい。ただし，うまくいかなくても矢内先生に直接質問のメールを送ったりはしないこと。 2.2.1 Macにインストールする場合の補足 Homebrewを使っている人は，Homebrewを使ってインストールする方が簡単。 Homebrewをインストールすれば，Command Line Toolsは自動で入る。 XCodeをインストールするとかなりのディスク容量を消費するので，ディスク容量に余裕がない場合にはCommand Line Toolsだけをインストールすることも可能。ターミナルで次のコマンドを実行することでインストールできる。 xcode-select --install 2.2.2 Linuxにインストールする場合の補足 Linux(WSLを含む)の場合には，RStudio Serverをインストールして，ChromeなどのブラウザでRStudioを使うこともできる。この方法だと，RやRStudioをインストールしたマシン(サーバー)以外のマシンからもブラウザを使って(サーバーの)RStudioにアクセスできるので便利。 2.2.3 Windowsにインストールする場合の補足 RtoolsはとりあえずなくてもOk(パッケージをソースコードからビルドする場合に必要だが，ほとんどのパッケージはビルド済みのバイナリが提供されている)。 全角文字(とくに全角スペース)が含まれるフォルダ名の問題は，Rに限らずさまざまなソフトで問題を引き起こすので，可能であればWindowsのユーザー名を半角英数字だけに変更しておくのがおすすめ。 2.3 RStudioの画面 RStudioを起動すると，細かい違いはあれ下のような画面が表示されるはず。 デフォルトでは白背景の配色になっていると思うが，コードを書くときは黒背景の方が見やすいので変更している。見た目を変更するには，RStudioのメニューから[Tools]&gt;[Global Options…]を選び，Appearanceで設定する。長時間の作業を行う場合には，色やフォントによって作業効率や目の疲れ方がけっこう変わってくるので，いろいろ試して自分にあった設定にしよう。 RStudioの画面は，デフォルトで4ペイン(4分割)。最初はそのまま使っても良いと思うが，画面のレイアウトは比較的自由に変えることができるので，慣れてきたら自分が使いやすいように設定しよう。 各ペインにはタブが複数配置されている。まずは，よく使うものだけ説明する。 Sourceペイン：デフォルトでは左上。何もファイルが開かれていない状態では最小化されているので，画面左上の+マークで新しいスクリプト・ファイル(R Script)を作成してみよう。 Consoleペイン：デフォルトでは左下。Rにコマンドを入力して実行する画面。 Environmentなどのペイン：デフォルトでは右上。Environmentタブには記憶されている変数やデータなどが表示される。Historyタブには実行したコマンドの履歴が表示され，選択して再度実行できる。 Filesなどのペイン：デフォルトでは右下。Filesタブには現在のディレクトリにあるファイルのリストが表示される。ファイル名をクリックすればファイルを開くことができる。RのソースコードなどやデータフレームはSourceペインで開かれる。Plotsタブはグラフが表示される場所。 Rで単発のコマンドを実行するときには，Conoleタブで行う。ただし，通常はスクリプト・ファイルにコマンドを書いて一つずつ実行していったり，いくつかのコマンドをまとめて実行したりすることが多い。Consoleでコマンドを実行した場合にも，Histroyタブからスクリプト・ファイルへと実行したコマンドを貼り付けておくと良い。そうすれば，いつでも作業を最初から再現できる。研究では，結果を再現できることが極めて重要。再現性を担保できることは，ExcelではなくRを使うメリットの一つ。 2.4 ヘルプの参照 Rのコマンド・ヘルプは?のあとにコマンド名を入力すれば参照できる。ヘルプは，Helpタブ(デフォルトでは右下のペイン)に表示される。知らないコマンドが出てきたらまずはヘルプを読む。英語が苦手でもDeepLで翻訳すればだいたい読める。 たとえば，table関数のヘルプを読みたければ， ?table 2.5 チュートリアルの実行 右上のペインにTutorialというタブがあり，そこからRのチュートリアル・レッスンを受けられる。チュートリアルを実行するためのパッケージをインストールするのに時間がかかるが，とりあえず一通り実行してみると，Rの使い方についてのイメージを持つことができる。 2.6 パッケージのインストール Rは本体にさまざまなパッケージを追加することで，機能を拡張することができる。パッケージをインストールするには，install.packages関数を用いる。とくに，tidyverseというパッケージは必ず利用することになるので，インストールしておこう。 install.packages(&quot;tidyverse&quot;) パッケージはインストールするだけでは使えないので，毎回読み込む必要がある。パッケージを読み込むにはlibrary関数を使う。 library(tidyverse) "],["rにおけるオブジェクト.html", "Chapter 3 Rにおけるオブジェクト 3.1 数値と文字列 3.2 ベクトル 3.3 ファクター 3.4 データフレーム", " Chapter 3 Rにおけるオブジェクト 3.1 数値と文字列 Rでは，さまざまな情報を記憶するための「箱」のことをオブジェクトという。オブジェクトには数値や文字，ベクトル，データフレームなどを記憶させることができる。 オブジェクトの名前は比較的自由につけることができる。日本語(漢字)を使うこともできるが，変数名に使うのはなるべく英数字とアンダースコア”_“だけにした方が良い。 たとえば，a というオブジェクトに2という数値，bというオブジェクトに1.5という数値を記憶させてみよう。 a &lt;- 2 b &lt;- 2.5 このような操作を「代入」という。代入が正しく行われたかどうかを確認してみよう。 a ## [1] 2 b ## [1] 2.5 a+b ## [1] 4.5 a*b ## [1] 5 a, bにそれぞれ2，2.5という数値が代入されていて，a,bを用いた計算もできることがわかる。 また，RStudioの”Environment”タブにオブジェクト名a，bと代入された値が表示されていることもあわせて確認しよう。 Environment オブジェクトには，数値だけではなく，文字列を代入することもできる。文字列は，ダブルクオーテーション”“で括る。 name &lt;- &quot;大阪 太郎&quot; gender &lt;- &quot;男&quot; age &lt;- &quot;20&quot; Environment nameというオブジェクトには”大阪 太郎”という文字列，genderというオブジェクトには”男”という文字列，ageというオブジェクトには”20”という文字列が代入れていることがわかる。 ここで，ageに代入されている”20”は，20という数値ではなく，文字列として扱われていることに注意しよう。そのため，ageを数値として計算に用いることはできず，下のようなエラーとなる。 age+10 ## Error in age + 10: 二項演算子の引数が数値ではありません オブジェクトは代入されるものによっていくつかの型(Type)に分類される。ここでは，a，bは数値型(numeric)，name，gender，ageは文字列型(character)となる。 EnvironmentタブをList表示からGrid表示に切り替えれば，オブジェクトの型が表示される。 Grid表示 文字列型のオブジェクトを数値型に変換したい場合には，as.numeric()関数を用いる。 as.numeric(age)+10 ## [1] 30 この例ではageは文字列型だが，as.numeric(age)でageを数値型に変換している。数値型に変換されているので，計算を行うことができる。 逆に数値型のオブジェクトを文字列型に変換するには，as.character()関数を用いる。 3.2 ベクトル 1つのオブジェクトに，複数の数値や文字列を代入することもできる。複数の数値や文字列が格納されたオブジェクトをベクトルという。たとえば，nameというベクトルに3人の名前を代入し，ageというベクトルに3人の年齢を代入してみよう。ベクトルは，c(要素1,要素2,…)で表す。 name &lt;- c(&quot;大阪 太郎&quot;,&quot;兵庫 次郎&quot;,&quot;京都 花子&quot;) age &lt;- c(19,21,20) nameとageの内容を確認してみよう。 name ## [1] &quot;大阪 太郎&quot; &quot;兵庫 次郎&quot; &quot;京都 花子&quot; age ## [1] 19 21 20 nameとageの内容が先ほどのものと置き換わっていることがわかる。Rでは既存のオブジェクトに改めて別の内容を代入すると，中身が置き換えられる。 ベクトル Environmentタブで確認すると，nameとageのLengthが1から3へと変わっていることがわかる。Lengthはベクトルの長さ(要素の数)を表す。 ベクトルから1つの要素を取り出すには，ベクトル名のあとに[要素番号]をつける。ただし，ベクトルの要素番号は1から始まることに注意しよう(言語によっては0から始まるものもあるので混乱しないよう)。たとえば，nameというベクトルの2番目の要素を取り出すのであれば，下のように書く。 name[2] ## [1] &quot;兵庫 次郎&quot; 3.3 ファクター ベクトルの要素が，性別や都道府県などカテゴリを表すデータの場合には，factor型のベクトルを用いる。 たとえば，性別を格納するベクトルgenderを作成し，factor型に変換してみよう。ベクトルをfactor型に変換するにはas.factor()関数を用いる。 gender &lt;- c(&quot;男&quot;,&quot;女&quot;,&quot;男&quot;) gender &lt;- as.factor(gender) genderの内容を確認してみよう。 gender ## [1] 男 女 男 ## Levels: 女 男 これは，ベクトルの内容は3人の性別(男，女，男)で，ベクトルの要素は「女」と「男」の2つのレベルに分類されていることを示している。 factor型のオブジェクトは，数値型へと変換することができる。factor型のオブジェクトgenderを数値型に変換して，新しいオブジェクトgender_numに代入してみよう。 gender_num &lt;- as.numeric(gender) gender_num ## [1] 2 1 2 性別が番号(女：1，男：2)に変換されていることがわかる。このとき振られる番号は，Levelsで表示される順番となる。レベルの順番は，factor関数でlevelsを指定することで変更可能。 gender &lt;- factor(gender, levels=c(&quot;男&quot;,&quot;女&quot;)) gender ## [1] 男 女 男 ## Levels: 男 女 as.numeric(gender) ## [1] 1 2 1 3.3.1 分類の結合 いくつかのカテゴリを1つにまとめて，factor型ベクトルのレベル数を減らすことを考えよう。 たとえば，大人・男，大人・女，子ども・男，子ども・女の4つに分類されたfactor型ベクトルを，大人か子どもかという2分類に変換したいとする。 まず，オブジェクトcategory4を作成して，factor型に変換する。 category4 &lt;- c(&quot;大人・男&quot;, &quot;子ども・女&quot;, &quot;大人・女&quot;, &quot;子ども・女&quot;, &quot;大人・男&quot;, &quot;大人・女&quot;, &quot;子ども・男&quot;, &quot;子ども・女&quot;, &quot;大人・男&quot;, &quot;子ども・女&quot;) category4 &lt;- as.factor(category4) category4 ## [1] 大人・男 子ども・女 大人・女 子ども・女 大人・男 大人・女 ## [7] 子ども・男 子ども・女 大人・男 子ども・女 ## Levels: 子ども・女 子ども・男 大人・女 大人・男 目的は，category4の要素が「大人・女」か「大人・男」であれば「大人」に，「子ども・女」か「子ども・男」であれば「子ども」に分類し直すことである。 category4を数値型に変換したものが1か2であれば「大人」，3か4であれば「子ども」なので，大人か子どもかの2分類を表すcategory2というオブジェクトを下のように作成することができる。 cat2 &lt;- c(&quot;大人&quot;,&quot;大人&quot;,&quot;子ども&quot;,&quot;子ども&quot;) category4_num &lt;- as.numeric(category4) category2 &lt;- cat2[category4_num] category2 &lt;- as.factor(category2) category2 ## [1] 子ども 大人 子ども 大人 子ども 子ども 大人 大人 子ども 大人 ## Levels: 子ども 大人 3.4 データフレーム 複数の(長さが同じ)ベクトルを束ねたオブジェクトをデータフレームという。多くの場合，データはデータ・フレームの形に整理して分析する。たとえば，3人の名前が格納されたベクトルname(文字列型)，年齢が格納されたベクトルage(数値型)，性別が格納されたベクトルgender(factor型)を，1つに束ねてdfというデータフレーム・オブジェクトを作成してみよう。データフレームを作成するには，data.frame()関数を用いる。data.frame関数の引数には，データフレームに含めたいオブジェクト名をカンマで区切って指定する。 df &lt;- data.frame(name, age, gender) df ## name age gender ## 1 大阪 太郎 19 男 ## 2 兵庫 次郎 21 女 ## 3 京都 花子 20 男 行数3(3人分のデータ)，列数3(name, age, genderの3つのベクトル)のデータフレームが作成されたことが確認できる。 Environmentタブにもdfが追加されていることを確認しよう。データフレームの中身を確認したいときには，EnvironmentタブはList表示にしておく方が便利。データフレーム名の左にある青い矢印のようなボタンを押せば，内容の表示・非表示が切り替えられる。 データフレーム データフレーム名(いまの場合はdf)もしくはその右にあるスプレッド・シートのマークをクリックすれば，ソースコードのペインにデータフレームがExcelのようなスプレッド・シート形式で表示される。 データフレーム データフレームに含まれる変数(ベクトル)は，データフレーム名$ベクトル名で表す。たとえば，dfというデータフレームに含まれるageというベクトル(変数)であれば，df$ageで表す。 たとえば，3人の平均年齢を求めてみよう。 mean(df$age) ## [1] 20 "],["データの要約1記述統計量.html", "Chapter 4 データの要約1（記述統計量） 4.1 データの概観 4.2 要約統計表の作成 4.3 相関表 4.4 グループ分け", " Chapter 4 データの要約1（記述統計量） データを入手したら分析を行う前にデータの概観を把握することが重要である。データフレームにどのような変数が含まれているかを確認し，それぞれの変数の記述統計量(平均値，分位点，分散など)を求め，必要であれば変数間の相関関係を調べよう。 ここでは，Rのパッケージ，tidyverseとstargazerを利用するので読み込んでおく。 library(tidyverse) library(stargazer) 4.1 データの概観 ここでは，練習としてRに組み込まれているサンプル・データirisを使ってデータを概観する。まず，サンプル・データをirisというデータフレームに読み込む。 iris &lt;- iris irisデータには，150のアヤメについて，種類(3分類)，萼片(がくへん)の長さと幅，花弁(かべん)の長さと幅の5つの変数が記録されている。 変数名 説明 Sepal.Length 萼片の長さ Sepal.Width 萼片の幅 Petal.Length 花弁の長さ Petal.Width 花弁の幅 Species アヤメの種類 データにどのような変数が含まれているかは，スプレッド・シートを表示させれば把握できるが，glimpse()関数を使っても良い(tidyverseの読み込みが必要)。 glimpse(iris) ## Rows: 150 ## Columns: 5 ## $ Sepal.Length &lt;dbl&gt; 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.… ## $ Sepal.Width &lt;dbl&gt; 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.… ## $ Petal.Length &lt;dbl&gt; 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.… ## $ Petal.Width &lt;dbl&gt; 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.… ## $ Species &lt;fct&gt; setosa, setosa, setosa, setosa, setosa, setosa, setosa, s… データの行数(観測数)が150，列数(変数の数)が5であることがわかる。また，5つの変数のはじめのいくつかの観測値を見ることができるので，データのイメージがつかめる。&lt;dbl&gt;や&lt;fct&gt;はそれぞれの変数の型で，dblは実数型，fctはファクター型であることを表している。変数の型には，ほかに文字列型，整数型などがある。 4.2 要約統計表の作成 データ全体のイメージがつかめたら，次は記録されている変数の要約統計量を求めてみよう。summary()関数を用いれば，データフレームに含まれるすべての変数の要約統計量を表示させることができる。 summary(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## setosa :50 ## versicolor:50 ## virginica :50 ## ## ## 数値型の変数については，最小値(Min.)，第一四分位(1st Qu.)，中央値(Median)，平均値(Mean)，第三四分位(3rd Qu.)，最大値(Max)が表示される。また，ファクター型の変数については，度数分布表が表示される。 これでも十分だが，要約統計量を求める変数や，求める要約統計量を指定したい場合には，summarize()関数を用いる。 summarize(iris, 萼片長平均 = mean(Sepal.Length), 萼片長標準偏差 = sd(Sepal.Length), 花弁長平均 = mean(Petal.Length), 花弁長標準偏差 = sd(Petal.Length) ) ## 萼片長平均 萼片長標準偏差 花弁長平均 花弁長標準偏差 ## 1 5.843333 0.8280661 3.758 1.765298 summarize()関数の第1引数にはデータフレーム名を指定する。第2引数以降は要約統計量の種類と対象の変数名を，名前=関数(変数名)という形式で指定する。名前は表示名なので自由に指定すれば良い。関数の部分には，例として下の表のような関数が利用できる。変数名xには，データフレーム内の変数名を指定すればよく，データフレーム名は必要ない。 関数 説明 mean(x) xの平均値 var(x) xの分散 sd(x) xの標準偏差 max(x) xの最大値 median(x) xの中央値 min(x) xの最小値 quantile(x, XX) xのXX×100パーセンタイル, e.g. xの25パーセンタイルであればquantile(x,0.25) summarize()関数は，後で述べるようにグループ別の集計のときに役に立つ。 レポートや論文に貼り付けるための要約統計表を作成するには，stargazerパッケージを用いると良い。 stargazer(iris, type = &quot;text&quot;, title=&quot;要約統計表&quot;, digits=2, summary.stat = c(&quot;mean&quot;, &quot;sd&quot;, &quot;min&quot;, &quot;p25&quot;, &quot;median&quot;, &quot;p75&quot;, &quot;max&quot;)) ## ## 要約統計表 ## ============================================================= ## Statistic Mean St. Dev. Min Pctl(25) Median Pctl(75) Max ## ------------------------------------------------------------- ## Sepal.Length 5.84 0.83 4.30 5.10 5.80 6.40 7.90 ## Sepal.Width 3.06 0.44 2.00 2.80 3.00 3.30 4.40 ## Petal.Length 3.76 1.77 1.00 1.60 4.35 5.10 6.90 ## Petal.Width 1.20 0.76 0.10 0.30 1.30 1.80 2.50 ## ------------------------------------------------------------- stargazer()関数では，第1引数としてデータフレーム(この例ではiris)を指定する。そのほかの引数は必要に応じて指定すれば良い。よく使うオプションだけ説明する。まず，typeは表の出力形式で，“text”(プレーンテキスト)，“html”，“latex”のいずれかを指定する。titleは表のタイトル，digitsは表の数値の小数点以下の桁数を指定する。summary.statsは表に含める要約統計量をベクトル形式で指定する。 要約統計量 指定方法 平均 mean 標準偏差 sd 最小値 min 最大値 max XXパーセンタイル(分位点) pXX 4.3 相関表 次に，変数間の相関を求めよう。相関表を求めるにはcor()関数を使う。引数にはデータフレーム名を指定する。ただし，irisにファクター型のSpeciesという変数が含まれているため，そのままではエラーになる。そこで，まずデータフレームirisから数値型の4つの変数だけを取り出したデータフレームを作成し，それをcor()関数に指定する。 select()は，データフレームから指定した変数を取り出す関数である。第1引数には取り出したい変数が含まれるデータフレームを指定する。第2引数以降は取り出したい変数名をカンマで区切って指定する。たとえば，select(dataframe,a,b)はdataframe$aとdataframe$bの2つの変数が含まれるデータフレームとなる。逆にデータフレームから指定した変数を除外したいときには，第2変数以降に変数名に”-“をつけて指定する。たとえば，select(dataframe,-a)はdataframeから変数aを除いたデータフレームとなる。また，変数は列番号で指定することも可能である。たとえば，select(dataframe,2:4)はdataframeから2列目から4列目までの変数を取り出したデータフレームとなる。 irisでは，5つの変数のうち数値型の4つを取り出して相関表を作成したいので，ファクター型の変数Speciesだけを除外してcor()関数に指定すれば良い。 cor(select(iris,-Species)) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Sepal.Length 1.0000000 -0.1175698 0.8717538 0.8179411 ## Sepal.Width -0.1175698 1.0000000 -0.4284401 -0.3661259 ## Petal.Length 0.8717538 -0.4284401 1.0000000 0.9628654 ## Petal.Width 0.8179411 -0.3661259 0.9628654 1.0000000 以下のコードでも同じ結果が得られる。 cor(select(iris,1:4)) cor(select(iris, Sepal.Length, Sepal.Width, Petal.Length, Petal.Width) 4.4 グループ分け データをグループに分けて，グループごとに要約統計を求めてみよう。irisデータでは，アヤメはsetosa，versicolor，virginicaの3種類に分類されている。アヤメの種類ごとに萼片と花弁の長さ，幅の平均を求めてみよう。そのための方法はいくつか考えられる。 4.4.1 データフレームを分割する まず，データフレームをアヤメの種類ごとに分割する方法である。filter()はデータフレームから条件を満たすデータ(行)を取り出す関数である。 iris_setosa &lt;- filter(iris, Species==&quot;setosa&quot;) iris_versicolor &lt;- filter(iris, Species==&quot;versicolor&quot;) iris_virginica &lt;- filter(iris, Species==&quot;virginica&quot;) アヤメの種類ごとのデータフレームができるので，それぞれのデータフレームで要約統計表を作成する。 stargazer(iris_setosa, type = &quot;text&quot;, title=&quot;setosa&quot;, digits=2, summary.stat = c(&quot;mean&quot;, &quot;sd&quot;, &quot;min&quot;, &quot;p25&quot;, &quot;median&quot;, &quot;p75&quot;, &quot;max&quot;)) ## ## setosa ## ============================================================= ## Statistic Mean St. Dev. Min Pctl(25) Median Pctl(75) Max ## ------------------------------------------------------------- ## Sepal.Length 5.01 0.35 4.30 4.80 5.00 5.20 5.80 ## Sepal.Width 3.43 0.38 2.30 3.20 3.40 3.68 4.40 ## Petal.Length 1.46 0.17 1.00 1.40 1.50 1.58 1.90 ## Petal.Width 0.25 0.11 0.10 0.20 0.20 0.30 0.60 ## ------------------------------------------------------------- stargazer(iris_versicolor, type = &quot;text&quot;, title=&quot;versicolor&quot;, digits=2, summary.stat = c(&quot;mean&quot;, &quot;sd&quot;, &quot;min&quot;, &quot;p25&quot;, &quot;median&quot;, &quot;p75&quot;, &quot;max&quot;)) ## ## versicolor ## ============================================================= ## Statistic Mean St. Dev. Min Pctl(25) Median Pctl(75) Max ## ------------------------------------------------------------- ## Sepal.Length 5.94 0.52 5 5.6 5.9 6.3 7 ## Sepal.Width 2.77 0.31 2.00 2.52 2.80 3.00 3.40 ## Petal.Length 4.26 0.47 3.00 4.00 4.35 4.60 5.10 ## Petal.Width 1.33 0.20 1.00 1.20 1.30 1.50 1.80 ## ------------------------------------------------------------- stargazer(iris_virginica, type = &quot;text&quot;, title=&quot;virginica&quot;, digits=2, summary.stat = c(&quot;mean&quot;, &quot;sd&quot;, &quot;min&quot;, &quot;p25&quot;, &quot;median&quot;, &quot;p75&quot;, &quot;max&quot;)) ## ## virginica ## ============================================================= ## Statistic Mean St. Dev. Min Pctl(25) Median Pctl(75) Max ## ------------------------------------------------------------- ## Sepal.Length 6.59 0.64 4.90 6.23 6.50 6.90 7.90 ## Sepal.Width 2.97 0.32 2.20 2.80 3.00 3.18 3.80 ## Petal.Length 5.55 0.55 4 5.1 5.6 5.9 7 ## Petal.Width 2.03 0.27 1.40 1.80 2.00 2.30 2.50 ## ------------------------------------------------------------- 4.4.2 group_by()を使う group_by関数を使うと，グループに分類されたデータフレームを作成することができる。第1引数には分類したいデータフレーム名，第2引数以降は分類を行うためのファクター型変数を指定する。複数のファクター型変数を指定して，階層的な分類を行うことも可能。グループに分類されたデータフレームにsummarize()関数を適用すると，グループごとの要約統計量が計算される。 iris_grouped &lt;- group_by(iris, Species) summarize(iris_grouped, 萼片長平均 = mean(Sepal.Length), 萼片長標準偏差 = sd(Sepal.Length), 花弁長平均 = mean(Petal.Length), 花弁長標準偏差 = sd(Petal.Length) ) ## # A tibble: 3 × 5 ## Species 萼片長平均 萼片長標準偏差 花弁長平均 花弁長標準偏差 ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 setosa 5.01 0.352 1.46 0.174 ## 2 versicolor 5.94 0.516 4.26 0.470 ## 3 virginica 6.59 0.636 5.55 0.552 4.4.3 xtabs()を使う xtabs()関数を使うと，多次元分割表を柔軟に作成することができる。第1引数には形式を，第2引数にはデータフレーム名を指定する。形式は，~x1+x2+...かy~x1+x2+...の形で指定する。たとえば，~x1+x2を指定すれば，x1,x2で表を分割し，各セルに入るデータ数が得られる。y~x1+x2を指定すれば，x1,x2で表を分割し，各セルに入るデータのyの合計が得られる。 irisでは分類に用いることができる変数はSpeciesの1つしかないが，それでもxtabs()を適用できる。以下のコードでSpeciesごとのデータ数の表を作成できる。 xtabs(~Species,iris) ## Species ## setosa versicolor virginica ## 50 50 50 次に，以下のコードでSpeciesごとの萼片長の合計値の表を作成できる。 xtabs(Sepal.Length~Species,iris) ## Species ## setosa versicolor virginica ## 250.3 296.8 329.4 平均値は合計値をデータ数で割ったものなので，Speciesごとの萼片長の平均値を以下のように求められる。 xtabs(Sepal.Length~Species,iris)/xtabs(~Species,iris) ## Species ## setosa versicolor virginica ## 5.006 5.936 6.588 "],["データの要約2グラフの作成.html", "Chapter 5 データの要約2(グラフの作成) 5.1 ヒストグラム 5.2 箱ひげ図 5.3 散布図", " Chapter 5 データの要約2(グラフの作成) データを概観するためには，記述統計量を求めるとともに，グラフを作成して視覚的にデータの特性を捉えることも重要である。一変数の分布を概観するにはヒストグラム，変数間の関係を概観するには散布図を描いてみるのが有効。 R本体でもさまざまなグラフを作成することができるが，ggplot2というパッケージを用いればより簡単にモダンなグラフを作成することができる。ggplot2は，tidyverseに含まれているので，tidyverseを読み込んでおく。 library(tidyverse) また，練習用データとしてirisを用いる。 iris &lt;- iris 5.1 ヒストグラム まず，150のアヤメの萼片の長さについて，ヒストグラムを作成してみよう。 ggplot2でグラフを作成するには，まずグラフ・オブジェクトを作成する。 g &lt;- iris %&gt;% ggplot(aes(x=Sepal.Length)) ここでは，gというオブジェクトにグラフの素地を作成している。ggplot()関数の振舞いを理解するのは簡単ではないが，まずは決まったやり方を覚えよう。ggplot()関数を使うときには，まずデータフレームとx軸，y軸にとる変数などをaes()で指定しグラフの素地を作成する。ここではggplot()関数にパイプでデータフレームirisを渡し，aes()でグラフのx軸に用いる変数Sepal.Lengthを指定している。ヒストグラムの場合に最低限必要なのは，x軸の変数(ヒストグラムを作成する変数)だけである。 次にヒストグラムを追加する。 g &lt;- g+geom_histogram() このように，ggplotでは作成した素地に，グラフやさまざまなパーツを足していくことで，好みのグラフを作成する。 グラフを表示させるにはplot()関数を用いる。 plot(g) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. とくに何も指定しなくても，Rが適当に区間を分割してヒストグラムを描いてくれる。 このままだと見にくいので，ヒストグラムのビンの幅を変更し，枠線や塗り色を指定してみよう。ヒストグラムの細かい設定は，geom_histogram()の引数に指定すれば良い。 g &lt;- iris %&gt;% ggplot(aes(x=Sepal.Length))+ geom_histogram(binwidth=0.25,color=&quot;black&quot;, fill=&quot;blue&quot;) plot(g) 次に，グラフの軸のラベルを変更して，グラフ・タイトルをつけてみよう。下のように，グラフ・オブジェクトにlabs()で軸ラベルやタイトルの設定を足す。 g &lt;- iris %&gt;% ggplot(aes(x=Sepal.Length))+ geom_histogram(binwidth=0.25,color=&quot;black&quot;, fill=&quot;blue&quot;)+ labs(x = &quot;萼片長&quot;, y = &quot;頻度&quot;, title = &quot;アヤメの萼片長の分布&quot;) plot(g) もし，このグラフのように日本語が文字化けして豆腐みたいになっていたら，フォントを指定する。 theme_set( theme_gray(base_family = &quot;IPAexGothic&quot;)) plot(g) ここでは，IPAexGothicフォントを指定している。もちろん，IPAexGothicフォントがパソコンにインストールされている必要がある。IPAフォントのダウンロードやインストール方法の解説は，文字情報技術促進協議会のホームページを見てほしい。 theme_gray()の部分を変更すれば，グラフの見た目を変えることができる。たとえば，theme_bw()に変えれば，背景が白になるので，印刷する場合に見やすい。 5.2 箱ひげ図 一変数の分布だけに関心があるときにはヒストグラムが有用だが，複数の変数の分布を比較したいときには箱ひげ図が便利である。 まず，アヤメの萼片長の箱ひげ図を描いてみよう。 bp &lt;- iris %&gt;% ggplot(aes(y=Sepal.Length))+ geom_boxplot() plot(bp) 箱ひげ図の場合には，aes()でy軸に変数を指定してやるだけで良い。ここで，yではなくxを指定すれば，横向きの箱ひげ図を描くことができる。 次に，アヤメの種類ごとに箱ひげ図を描いて，萼片長の分布を比較しよう。 bp &lt;- iris %&gt;% ggplot(aes(y=Sepal.Length, fill=Species))+ geom_boxplot() plot(bp) ggplot関数では，aes()にfillでファクター型変数を指定すれば，指定された変数のレベルごとに塗り色を分けてグラフを描くことができる。ここでは，Speciesを指定して，アヤメの種類ごとに塗り分けてグラフを描いている。 5.3 散布図 次に，変数の間の関係を分析するために，散布図を作成してみよう。ここでは，アヤメの萼片の長さを横軸に，萼片の幅を縦軸にとって，この二変数の関係を表す散布図を作成する。 scatter &lt;- iris %&gt;% ggplot(aes(x=Sepal.Length, y=Sepal.Width))+ geom_point() plot(scatter) 散布図の場合は，aes()でx軸の変数とy軸の変数を指定する。あとは，geom_point()を足してやれば，単純な散布図を描くことができる。 散布図も，アヤメの種類ごとに色分けして描くことができる。色分けを行うには，aes()のcolorでファクター型変数を指定すれば良い。この場合は，Speciesによって点の色を変えるので，以下のように書く。 scatter &lt;- iris %&gt;% ggplot(aes(x=Sepal.Length, y=Sepal.Width, color=Species))+ geom_point()+ labs(x=&quot;萼片長&quot;,y=&quot;萼片幅&quot;, title=&quot;萼片の長さと幅の関係&quot;) plot(scatter) ここでは，あわせてグラフタイトルや軸のラベルも指定した。 ggplotは利用している人が非常に多いので，インターネット上にいくらでも丁寧な解説がある。使い方を覚えるというよりは，グラフを描く必要があるときに，どうすれば目的のグラフを描くことができるかをググりながら使えば良い。 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
